#   Since I regulary update ths file, please send any comments
#   to:           Michelle Konzack <linux4michelle@freenet.de>
#   Last Update:  Thu, 01 Jun 2006 22:10:07 +0200


context default

#keyword ${\{abcdefghijklmno} brightred

#	keyword #*\n brown

#	keyword " green

    keyword $(( brightcyan
    keyword (( brightcyan
    keyword )) brightcyan

	keyword = cyan
	keyword =~ cyan
	keyword [[ white
	keyword ]] white
	keyword [  white
	keyword ]  white
#	keyword ;  brown
	keyword %  cyan


	
wholechars abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_
    keyword ${\{abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_\}+} magenta black
    keyword wholeright $\{abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_\}+ magenta black


	keyword whole <<EOT yellow
	keyword whole EOT yellow
	keyword whole <<EOF yellow
	keyword whole EOF yellow


    keyword ;; brightred
    keyword \\@ brightred
    keyword \\$ brightred
    keyword \\\\ brightred
    keyword \\" brightred
    keyword \\' brightred
    keyword \\` brightred
    keyword ` brightred
#    keyword ; green


    keyword $(*) brightgreen

    
    
#    keyword ${*} brightgreen
#    keyword ${ cyan
#    keyword { cyan
#    keyword } cyan
#    keyword / cyan

#    keyword whole linestart #!\[\s\]*\n brightcyan black
    keyword linestart #!\[\s\]*\n brightcyan black

#    keyword $\* brightred
    keyword $@ brightred
    keyword $# brightred
    keyword $? brightred
    keyword $- brightred
    keyword $$ brightred
    keyword $! brightred
    keyword $_ brightred

    keyword whole 2>&1 brightred
    keyword whole 1>&2 brightred
    keyword whole 2>   brightred
    keyword whole 1>   brightred

#    keyword wholeright $\[0123456789\] brightred


#    keyword $ brightgreen

#    keyword wholeleft linestart function*() white
#    keyword wholeleft linestart function\[\s\]+ white
#    keyword wholeright +() white
#    keyword { cyan
#    keyword } cyan


#    keyword = cyan
    keyword & white
#    keyword | brightcyan
#	keyword whole -\[abcdefghijklmnopqrstuvwxyz-\] red
	keyword whole exec yellow
	keyword \\\n green black



wholechars abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789-._



    keyword whole echo 		yellow
    keyword whole eval 		yellow
    keyword whole break 	yellow
    keyword whole case 		yellow
    keyword whole clear     yellow
    keyword whole continue	yellow
    keyword whole declare   yellow
    keyword whole done 		yellow
    keyword whole do 		yellow
    keyword whole elif 		yellow
    keyword whole else 		yellow
    keyword whole esac 		yellow
    keyword whole exit 		yellow
    keyword whole export 	yellow
    keyword whole fi 		yellow
    keyword whole for 		yellow
    keyword whole getopts   yellow
    keyword whole if 		yellow
    keyword whole in 		yellow
    keyword whole read 		yellow
    keyword whole return 	yellow
    keyword whole select 	yellow
    keyword whole shift 	yellow
    keyword whole source    yellow
    keyword whole then 		yellow
    keyword whole trap 		yellow
    keyword whole until 	yellow
    keyword whole unset 	yellow
    keyword whole wait 		yellow
    keyword whole while 	yellow


    keyword whole /dev/audio  brightblue
    keyword whole /dev/dsp    brightblue
    keyword whole /dev/null   brightblue
    keyword whole /dev/mixed  brightblue
    keyword whole /dev/stdin  brightblue
    keyword whole /dev/stdout brightblue
    keyword whole /dev/stderr brightblue
    keyword whole /dev/zero   brightblue

wholechars abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_

#	keyword wholeright ${\{abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_\}+ green
#context exclusive whole ${\{abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_\}+ } green
#	keyword \{abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_\} green
#	keyword % brightcyan



context # \n brown
#    spellcheck

context exclusive whole <<\[\s\]\[-\]\[\s\]\[\\\]EOF EOF green
context exclusive whole <<\[\s\]\[-\]\[\s\]\[\\\]EOT EOT green
context exclusive whole <<\[\s\]\[-\]\[\s\]\[\\\]END END green

context ' ' green
#	keyword \\ red

#context exclusive " " brightgreen
context " " brightgreen
	keyword `*` lightgray black
	keyword \\\{\\$\'"} green black
	
#    keyword \\* brightgreen
#    keyword \\@ brightgreen
    
#    keyword \\\\ brightgreen
#    keyword \\` brightgreen
#    keyword \\" brightgreen
	keyword \\\{nrt"'} cyan black
    keyword $(*) white black
    keyword ${*} brightmagenta
    keyword $\* brightred
    keyword $@ brightred
    keyword $# brightred
    keyword $? brightred
    keyword $- brightred
    keyword $$ brightred
    keyword $! brightred
    keyword wholeright $_ brightred
    keyword wholeright $\[0123456789\] brightred
    keyword wholeright $+ brightmagenta
    keyword $ brightgreen

context exclusive ` ` lightgray black
    keyword '*' green
    keyword " green
    keyword \\` green
    keyword ; brightcyan
    keyword $(*) brightgreen
    keyword ${*} magenta
    keyword { brightcyan
    keyword } brightcyan

    keyword $\* brightred
    keyword $@ brightred
    keyword $# brightred
    keyword $? brightred
    keyword $- brightred
    keyword $$ brightred
    keyword $! brightred
    keyword $_ brightred

    keyword whole 2>&1 brightred
    keyword whole 2>   brightred
    keyword whole 1>   brightred

    keyword wholeright $\[0123456789\] brightred

    keyword wholeright $+ brightgreen

    keyword $ brightgreen

wholechars abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789-._

    keyword whole break yellow
    keyword whole case yellow
    keyword whole clear         yellow
    keyword whole continue yellow
    keyword whole declare       yellow
    keyword whole done yellow
    keyword whole do yellow
    keyword whole elif yellow
    keyword whole else yellow
    keyword whole esac yellow
    keyword whole exit yellow
    keyword whole export yellow
    keyword whole fi yellow
    keyword whole for yellow
    keyword whole getopts       yellow
    keyword whole if yellow
    keyword whole in yellow
    keyword whole read yellow
    keyword whole return yellow
    keyword whole select yellow
    keyword whole shift yellow
    keyword whole source        yellow
    keyword whole then yellow
    keyword whole trap yellow
    keyword whole until yellow
    keyword whole unset yellow
    keyword whole wait          yellow
    keyword whole while yellow

    keyword whole /dev/audio  brightblue
    keyword whole /dev/dsp    brightblue
    keyword whole /dev/null   brightblue
    keyword whole /dev/mixed  brightblue
    keyword whole /dev/stdin  brightblue
    keyword whole /dev/stdout brightblue
    keyword whole /dev/stderr brightblue
    keyword whole /dev/zero   brightblue


#wholechars #{}
context ${ } magenta black
#	wholechars }
#	keyword wholeright \{0123456789abcdefghijklmnopqrstuvwxyz_\}\[0123456789abcdefghijklmnopqrstuvwxyz_\] brightgreen
#	keyword whole ##+ red
#	keyword whole #+ red
#	keyword whole %%+ cyan
#	keyword whole %+ cyan










